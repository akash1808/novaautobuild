Index: nova-2012.1~e4~20120208.12523/nova/rootwrap/filters.py
===================================================================
--- nova-2012.1~e4~20120208.12523.orig/nova/rootwrap/filters.py
+++ nova-2012.1~e4~20120208.12523/nova/rootwrap/filters.py
@@ -103,6 +103,7 @@
         if userargs[0] != "kill":
             return False
         args = list(userargs)
+        print 'args:', args
         if len(args) == 3:
             signal = args.pop(1)
             if signal not in self.args[0]:
@@ -116,12 +117,14 @@
                 # No signal, but list doesn't include empty string
                 return False
         try:
+            print 'doing os.readlink("/proc/%d/exe"' % int(args[1])
             command = os.readlink("/proc/%d/exe" % int(args[1]))
             if command not in self.args[1]:
                 # Affected executable not in accepted list
                 return False
-        except (ValueError, OSError):
+        except (ValueError, OSError), e:
             # Incorrect PID
+            print 'failed:', e
             return False
         return True
 
Index: nova-2012.1~e4~20120208.12523/nova/tests/test_nova_rootwrap.py
===================================================================
--- nova-2012.1~e4~20120208.12523.orig/nova/tests/test_nova_rootwrap.py
+++ nova-2012.1~e4~20120208.12523/nova/tests/test_nova_rootwrap.py
@@ -66,6 +66,8 @@
     @test.skip_if(not os.path.exists("/proc/%d" % os.getpid()),
                   "Test requires /proc filesystem (procfs)")
     def test_KillFilter(self):
+        import time
+        print 'time.time() right before invoking sleep 5', time.time()
         p = subprocess.Popen(["/bin/sleep", "5"])
         f = filters.KillFilter("/bin/kill", "root",
                                ["-ALRM"],
@@ -88,6 +90,7 @@
         self.assertFalse(f.match(usercmd))
         usercmd = ['kill', p.pid]
         # Providing no signal should work
+        print 'time.time() right before invoking the usually failing test: %s %r' % (time.time(), p.poll())
         self.assertTrue(f.match(usercmd))
         usercmd = ['kill', '-9', p.pid]
         # Providing -9 signal should work
