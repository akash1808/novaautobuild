From ece23d3bc2971c9ea5215f3bfd48f5914cf59a6a Mon Sep 17 00:00:00 2001
From: Chuck Short <chuck.short@canonical.com>
Date: Tue, 27 Mar 2012 14:54:45 -0400
Subject: [PATCH] Monitor console.log for indefinite growth

Using the libvirt serial console, everything
that is dumped into a console.log file, this file can
keep on growing depending on what the user is doing in the console.

This patch adds add a new flag called "use_console_monitor",
the console monitor will check the instance's console.log size.
If it goes past a certain amount it will warn in the nova-compute.log
file that it is growing and when was the file last modified.

Finally, if the console.log goes past a certain threshold an
additional flag has been added to allow the console monitor to
truncate it.

This bug does not entirely fix bug 832507, but it is a stop
gap measure until we can resolve it properly in libvirt
or qemu-kvm

Change-Id: I310adfe00a3ad6c3631a71c9d2b1befb12a31f5a
Signed-off-by: Chuck Short <chuck.short@canonical.com>
---
 nova/compute/manager.py         |   24 +++++++++++++++++++++++-
 nova/virt/driver.py             |    9 +++++++++
 nova/virt/libvirt/connection.py |   24 ++++++++++++++++++++++++
 3 files changed, 56 insertions(+), 1 deletions(-)

diff --git a/nova/compute/manager.py b/nova/compute/manager.py
index 48e135b..fa0ff37 100644
--- a/nova/compute/manager.py
+++ b/nova/compute/manager.py
@@ -118,7 +118,18 @@ compute_opts = [
     cfg.IntOpt("heal_instance_info_cache_interval",
                default=60,
                help="Number of seconds between instance info_cache self "
-                        "healing updates")
+                        "healing updates"),
+    cfg.BoolOpt("use_console_monitor",
+                default=False,
+                help="Use scheduler to monitor the console.log."),
+    cfg.IntOpt("console_monitor_threshold_size",
+              default=102400,
+              help="Max console.log size."),
+    cfg.BoolOpt("console_monitor_truncate",
+                default=False,
+                help="Truncate console.log when it reaches "
+                     "past console threshold size")
+
     ]
 
 FLAGS = flags.FLAGS
@@ -2402,6 +2413,17 @@ class ComputeManager(manager.SchedulerDependentManager):
         """
         self.driver.update_available_resource(context, self.host)
 
+    @manager.periodic_task
+    def run_console_monitor(self, context):
+        """Monitor the console.log size for a given instance."""
+        if not FLAGS.use_console_monitor:
+            return
+
+        try:
+            self.driver.monitor_console_log(context)
+        except NotImplementedError:
+            pass
+
     def add_instance_fault_from_exc(self, context, instance_uuid, fault,
                                     exc_info=None):
         """Adds the specified fault to the database."""
diff --git a/nova/virt/driver.py b/nova/virt/driver.py
index 9658273..8e39ebd 100644
--- a/nova/virt/driver.py
+++ b/nova/virt/driver.py
@@ -664,6 +664,15 @@ class ComputeDriver(object):
         the cache and remove images which are no longer of interest.
         """
 
+    def monitor_console_log(self, context):
+        """
+        Monitor the drivers console.log
+
+        Some drivers just dump the serial console to a file. This method
+        monitors the the console.log so the console.log file can remain 
+        managable.
+        """
+
     def add_to_aggregate(self, context, aggregate, host, **kwargs):
         """Add a compute host to an aggregate."""
         raise NotImplementedError()
diff --git a/nova/virt/libvirt/connection.py b/nova/virt/libvirt/connection.py
index 8929668..d4940fc 100644
--- a/nova/virt/libvirt/connection.py
+++ b/nova/virt/libvirt/connection.py
@@ -2409,6 +2409,30 @@ class LibvirtConnection(driver.ComputeDriver):
         """Manage the local cache of images."""
         self.image_cache_manager.verify_base_images(context)
 
+    def monitor_console_log(self, context):
+        """ Monitor the console.log file."""
+        instances = db.instance_get_all_by_filters(context,
+                                                   {'power_state': 1})
+        for instance in instances:
+            LOG.debug(_("Instance %s: Start console monitor check"),
+                        instance['name'])
+            console_log_file = os.path.join(FLAGS.instances_path,
+                                            instance['name'],
+                                            'console.log')
+            if os.path.exists(console_log_file):
+                size = os.stat(console_log_file)[6]
+                file_access_time = os.stat(console_log_file)[8]
+                if size >= FLAGS.console_monitor_threshold_size:
+                    LOG.info(_('console.log size: %(size)s bytes,'
+                               'last accessed: %(file_access_time)s:')
+                            % locals(), instance=instance)
+                if FLAGS.console_monitor_truncate:
+                    out, err = utils.execute('truncate',
+                                             '--size=%s' % FLAGS.console_monitor_threshold_size,
+                                             console_log_file)
+                else:
+                    LOG.info(_('Truncate console.log not set.'))
+
     @exception.wrap_exception()
     def migrate_disk_and_power_off(self, context, instance, dest,
                                    instance_type, network_info):
-- 
1.7.9.1

