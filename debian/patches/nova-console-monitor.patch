From e3a721e2ebb52849d05080e951f96f4fc0b42c0b Mon Sep 17 00:00:00 2001
From: Chuck Short <chuck.short@canonical.com>
Date: Thu, 29 Mar 2012 11:28:37 -0400
Subject: [PATCH] console monitor

Signed-off-by: Chuck Short <chuck.short@canonical.com>
---
 nova/compute/manager.py         |   28 +++++++++++++++++++++++++++-
 nova/virt/driver.py             |    8 ++++++++
 nova/virt/libvirt/connection.py |   22 ++++++++++++++++++++++
 3 files changed, 57 insertions(+), 1 deletions(-)

diff --git a/nova/compute/manager.py b/nova/compute/manager.py
index 48e135b..fa844bd 100644
--- a/nova/compute/manager.py
+++ b/nova/compute/manager.py
@@ -118,7 +118,17 @@ compute_opts = [
     cfg.IntOpt("heal_instance_info_cache_interval",
                default=60,
                help="Number of seconds between instance info_cache self "
-                        "healing updates")
+                        "healing updates"),
+    cfg.BoolOpt("use_console_monitor",
+                default=False,
+                help="Use scheduler to monitor the console.log."),
+    cfg.IntOpt("console_threshold_size",
+                default=104857600,
+                help="Max console.log size."),
+    cfg.BoolOpt("console_monitor_truncate",
+                default=False,
+                help="Truncate console.log when it reaches "
+                     "past the console threshhold size.")
     ]
 
 FLAGS = flags.FLAGS
@@ -2393,6 +2403,22 @@ class ComputeManager(manager.SchedulerDependentManager):
                 self._delete_instance(context, instance)
 
     @manager.periodic_task
+    def run_console_monitor(self, context):
+        """Monitor the console.log size for a given instance."""
+        if not FLAGS.use_console_monitor:
+            return
+
+        try:
+            LOG.info(_('Running console monitor'))
+            instances = self.db.instance_get_all_by_host(context, self.host)
+            for instance in instances:
+                    drv_state = self._get_power_state(context, instance)
+                    if drv_state == power_state.RUNNING:
+                        self.driver.monitor_console_log(instance)
+        except NotImplementedError:
+            pass
+
+    @manager.periodic_task
     def update_available_resource(self, context):
         """See driver.update_available_resource()
 
diff --git a/nova/virt/driver.py b/nova/virt/driver.py
index 9658273..4662dd6 100644
--- a/nova/virt/driver.py
+++ b/nova/virt/driver.py
@@ -663,6 +663,14 @@ class ComputeDriver(object):
         related to other calls into the driver. The prime example is to clean
         the cache and remove images which are no longer of interest.
         """
+    def monitor_console_log(self, instance):
+        """
+        Manage the drivers console.log
+
+        Some drives just dump the serial console to a file. This method
+        monitors the console.log, so the console.log file can remain
+        managable.
+        """
 
     def add_to_aggregate(self, context, aggregate, host, **kwargs):
         """Add a compute host to an aggregate."""
diff --git a/nova/virt/libvirt/connection.py b/nova/virt/libvirt/connection.py
index 8929668..719c35c 100644
--- a/nova/virt/libvirt/connection.py
+++ b/nova/virt/libvirt/connection.py
@@ -2409,6 +2409,28 @@ class LibvirtConnection(driver.ComputeDriver):
         """Manage the local cache of images."""
         self.image_cache_manager.verify_base_images(context)
 
+    def monitor_console_log(self, instance):
+        console_log_file = os.path.join(FLAGS.instances_path,
+                                   instance['name'],
+                                   'console.log')
+        if os.path.exists(console_log_file):
+            stat = os.stat(console_log_file)
+            if stat.st_size >= FLAGS.console_threshold_size:
+                size = stat.st_size
+                file_acess_time = stat.st_mtime
+                LOG.warn(_('console.log size: %(size)s bytes, '
+                           'last accessed: %(file_acess_time)s.')
+                         % locals(), instance=instance)
+                if FLAGS.console_monitor_truncate:
+                    LOG.warn(_('Truncating console.log for %s.'),
+                                instance['name'])
+                    utils.execute('truncate',
+                                  '--size=%s' % FLAGS.console_threshold_size,
+                                  console_log_file)
+                    libvirt_utils.chown(console_log_fle, os.getuid())
+                else:
+                    LOG.warn(_('Truncate console.log not set.'))
+
     @exception.wrap_exception()
     def migrate_disk_and_power_off(self, context, instance, dest,
                                    instance_type, network_info):
-- 
1.7.9.1

