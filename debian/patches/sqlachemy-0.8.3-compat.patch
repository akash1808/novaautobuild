Description: Fixes sqlalchemy 0.8.3 errors
Author: Chuck Short <zulcss@ubuntu.com>
Fowarded: Not-needed
diff --git a/nova/db/sqlalchemy/utils.py b/nova/db/sqlalchemy/utils.py
index b07058c..d65d03d 100644
--- a/nova/db/sqlalchemy/utils.py
+++ b/nova/db/sqlalchemy/utils.py
@@ -514,8 +514,12 @@ def _change_deleted_column_type_to_id_type_sqlite(migrate_engine, table_name,
         if not isinstance(constraint, CheckConstraint):
             return False
         sqltext = str(constraint.sqltext)
-        return (sqltext.endswith("deleted in (0, 1)") or
-                sqltext.endswith("deleted IN (:deleted_1, :deleted_2)"))
+        constraint_markers = (
+            "deleted in (0, 1)",
+            "deleted IN (:deleted_1, :deleted_2)",
+            "deleted IN (:param_1, :param_2)"
+        )
+        return any(sqltext.endswith(marker) for marker in constraint_markers)
 
     constraints = []
     for constraint in table.constraints:
diff --git a/nova/openstack/common/db/sqlalchemy/session.py b/nova/openstack/common/db/sqlalchemy/session.py
index 67c0c70..d750788 100644
--- a/nova/openstack/common/db/sqlalchemy/session.py
+++ b/nova/openstack/common/db/sqlalchemy/session.py
@@ -438,6 +438,11 @@ def get_session(autocommit=True, expire_on_commit=False,
 # 1 column - (IntegrityError) column c1 is not unique
 # N columns - (IntegrityError) column c1, c2, ..., N are not unique
 #
+# sqlite since 3.7.16:
+# 1 column - (IntegrityError) UNIQUE constraint failed: k1
+#
+# N columns - (IntegrityError) UNIQUE constraint failed: k1, k2
+#
 # postgres:
 # 1 column - (IntegrityError) duplicate key value violates unique
 #               constraint "users_c1_key"
@@ -450,9 +455,10 @@ def get_session(autocommit=True, expire_on_commit=False,
 # N columns - (IntegrityError) (1062, "Duplicate entry 'values joined
 #               with -' for key 'name_of_our_constraint'")
 _DUP_KEY_RE_DB = {
-    "sqlite": re.compile(r"^.*columns?([^)]+)(is|are)\s+not\s+unique$"),
-    "postgresql": re.compile(r"^.*duplicate\s+key.*\"([^\"]+)\"\s*\n.*$"),
-    "mysql": re.compile(r"^.*\(1062,.*'([^\']+)'\"\)$")
+    "sqlite": (re.compile(r"^.*columns?([^)]+)(is|are)\s+not\s+unique$"),
+               re.compile(r"^.*UNIQUE\s+constraint\s+failed:\s+(.+)$")),
+    "postgresql": (re.compile(r"^.*duplicate\s+key.*\"([^\"]+)\"\s*\n.*$"),),
+    "mysql": (re.compile(r"^.*\(1062,.*'([^\']+)'\"\)$"),)
 }
 
 
@@ -477,10 +483,14 @@ def _raise_if_duplicate_entry_error(integrity_error, engine_name):
     if engine_name not in ["mysql", "sqlite", "postgresql"]:
         return
 
-    m = _DUP_KEY_RE_DB[engine_name].match(integrity_error.message)
-    if not m:
+    for pattern in _DUP_KEY_RE_DB[engine_name]:
+        match = pattern.match(integrity_error.message)
+        if match:
+            break
+    else:
         return
-    columns = m.group(1)
+
+    columns = match.group(1)
 
     if engine_name == "sqlite":
         columns = columns.strip().split(", ")
diff --git a/nova/tests/db/test_db_api.py b/nova/tests/db/test_db_api.py
index d8ed8d0..0519a94 100644
--- a/nova/tests/db/test_db_api.py
+++ b/nova/tests/db/test_db_api.py
@@ -2209,7 +2209,7 @@ class ServiceTestCase(test.TestCase, ModelsObjectComparatorMixin):
         db.service_create(self.ctxt, self._get_base_values())
         values = self._get_base_values()
         values.update({'topic': 'top1'})
-        self.assertRaises(exception.ServiceBinaryExists, db.service_create,
+        self.assertRaises(exception.ServiceTopicExists, db.service_create,
                           self.ctxt, values)
 
     def test_service_topic_exists_exceptions(self):
@@ -2682,7 +2682,7 @@ class InstanceTypeTestCase(BaseInstanceTypeTestCase):
 
     def test_flavor_create_duplicate_flavorid(self):
         self._create_flavor({})
-        self.assertRaises(exception.FlavorIdExists,
+        self.assertRaises(exception.FlavorExists,
                           self._create_flavor,
                           {'name': 'some_random_name'})
 
diff --git a/nova/tests/test_flavors.py b/nova/tests/test_flavors.py
index 64395dd..d704264 100644
--- a/nova/tests/test_flavors.py
+++ b/nova/tests/test_flavors.py
@@ -556,6 +556,6 @@ class CreateInstanceTypeTest(test.TestCase):
     def test_duplicate_flavorids_fail(self):
         # Ensures that flavorid duplicates raise FlavorCreateFailed.
         flavors.create('flavor1', 64, 1, 120, flavorid='flavorid')
-        self.assertRaises(exception.FlavorIdExists,
+        self.assertRaises(exception.FlavorExists,
                           flavors.create,
                           'flavor2', 64, 1, 120, flavorid='flavorid')
